{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["request","url","fetch","then","response","json","result","data","getUser","userId","TodoList","state","title","visibleTodos","status","a","todos","this","setState","selectUser","props","filter","el","completed","length","todo","toLowerCase","includes","className","type","value","onChange","event","target","map","key","id","classnames","readOnly","checked","onClick","React","Component","CurrentUser","user","prevProps","prevState","name","email","phone","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"mZAEMA,EAAU,SAAAC,GAAG,OAAIC,MAAM,GAAD,OAFX,kCAEW,OAAeD,IACxCE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,SAGZC,EAAU,SAAAC,GAAM,OAAIT,EAAQ,UAAD,OAAWS,KCDtCC,EAAb,4MACEC,MAAQ,CACNC,MAAO,GACPC,aAAc,GACdC,OAAQ,GAJZ,8FAOE,4BAAAC,EAAA,sEDP4Bf,EAAQ,UCOpC,OACQgB,EADR,OAGEC,KAAKC,SAAS,CACZL,aAAa,YAAKG,KAJtB,gDAPF,0EAeE,WAAU,IAAD,OACCG,EAAeF,KAAKG,MAApBD,WACFN,EAAiBI,KAAKN,MAAtBE,aACN,EAA0BI,KAAKN,MAAvBG,EAAR,EAAQA,OAAQF,EAAhB,EAAgBA,MAehB,OAbe,IAAXE,IACFD,EAA2B,IAAXC,EACZD,EAAaQ,QAAO,SAAAC,GAAE,OAAIA,EAAGC,aAC7BV,EAAaQ,QAAO,SAAAC,GAAE,OAAKA,EAAGC,cAGf,IAAjBX,EAAMY,SACRX,EAAeA,EACZQ,QAAO,SAAAI,GAAI,OAAIA,EAAKb,MAClBc,cACAC,SAASf,EAAMc,mBAIpB,yBAAKE,UAAU,YAEb,sCACA,2BACEC,KAAK,OACLC,MAAOb,KAAKN,MAAMC,MAClBmB,SAAU,SAAAC,GAAK,OAAI,EAAKd,SAAS,CAAEN,MAAOoB,EAAMC,OAAOH,WAGzD,4BACEA,MAAOhB,EACPiB,SAAU,SAAAC,GAAK,OAAI,EAAKd,SAAS,CAAEJ,QAASkB,EAAMC,OAAOH,UAEzD,4BAAQA,MAAO,GAAf,YAGA,4BAAQA,MAAO,GAAf,kBAGA,4BAAQA,MAAO,GAAf,uBAKF,yBAAKF,UAAU,4BACb,wBAAIA,UAAU,kBACXf,EAAaqB,KAAI,SAAAT,GAAI,OACpB,wBACEU,IAAKV,EAAKW,GACVR,UAAWS,IAAW,iBACpBZ,EAAKF,UACD,0BACA,8BAEN,+BACE,2BACEM,KAAK,WACLS,UAAQ,EACRC,QAASd,EAAKF,YAEhB,2BACGE,EAAKb,QAIV,4BACEgB,UAAWS,IACT,wBACA,SACAZ,EAAKF,UACD,kCACA,IAENM,KAAK,SACLW,QAAS,WACPrB,EAAWM,EAAKhB,UAVpB,SAcGgB,EAAKhB,mBA7FxB,GAA8BgC,IAAMC,WCDvBC,G,MAAb,4MACEhC,MAAQ,CACNiC,KAAM,MAFV,8FAKE,4BAAA7B,EAAA,sEACqBP,EAAQS,KAAKG,MAAMX,QADxC,OACQmC,EADR,OAGE3B,KAAKC,SAAS,CAAE0B,SAHlB,gDALF,6HAWE,WAAyBC,EAAWC,GAApC,eAAA/B,EAAA,yDACM8B,EAAUpC,SAAWQ,KAAKG,MAAMX,OADtC,gCAEuBD,EAAQS,KAAKG,MAAMX,QAF1C,OAEUmC,EAFV,OAII3B,KAAKC,SAAS,CAAE0B,SAJpB,gDAXF,6EAmBE,WAAU,IAAD,OACCnC,EAAWQ,KAAKG,MAAhBX,OACAmC,EAAS3B,KAAKN,MAAdiC,KAER,OACE,yBAAKhB,UAAU,eACZgB,GACC,oCACE,wBAAIhB,UAAU,sBACZ,+CAEGnB,IAGL,wBAAImB,UAAU,qBAAqBgB,EAAKG,MACxC,uBAAGnB,UAAU,sBAAsBgB,EAAKI,OACxC,uBAAGpB,UAAU,sBAAsBgB,EAAKK,OACxC,4BACEpB,KAAK,SACLW,QAAS,kBAAM,EAAKtB,SAAS,CAAE0B,KAAM,SAFvC,eApCZ,GAAiCH,IAAMC,YCiCxBQ,EAhCf,4MACEvC,MAAQ,CACNwC,eAAgB,GAFpB,4CAKE,WAAU,IAAD,OACCA,EAAmBlC,KAAKN,MAAxBwC,eAER,OACE,yBAAKvB,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACET,WAAY,SAACV,GACX,EAAKS,SAAS,CAAEiC,eAAgB1C,QAKtC,yBAAKmB,UAAU,gBACb,yBAAKA,UAAU,0BACZuB,EACC,kBAAC,EAAD,CACE1C,OAAQ0C,IAER,0BAxBhB,GAAyBV,IAAMC,WCF/BU,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.397958f0.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getTodos } from '../../api';\n\nexport class TodoList extends React.Component {\n  state = {\n    title: '',\n    visibleTodos: [],\n    status: 0,\n  }\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      visibleTodos: [...todos],\n    });\n  }\n\n  render() {\n    const { selectUser } = this.props;\n    let { visibleTodos } = this.state;\n    const { status, title } = this.state;\n\n    if (status !== 0) {\n      visibleTodos = (status === 1)\n        ? visibleTodos.filter(el => el.completed)\n        : visibleTodos.filter(el => !el.completed);\n    }\n\n    if (title.length !== 0) {\n      visibleTodos = visibleTodos\n        .filter(todo => todo.title\n          .toLowerCase()\n          .includes(title.toLowerCase()));\n    }\n\n    return (\n      <div className=\"TodoList\">\n\n        <h2>Todos:</h2>\n        <input\n          type=\"text\"\n          value={this.state.title}\n          onChange={event => this.setState({ title: event.target.value })}\n        />\n\n        <select\n          value={status}\n          onChange={event => this.setState({ status: +event.target.value })}\n        >\n          <option value={0}>\n            Show All\n          </option>\n          <option value={1}>\n            Show Completed\n          </option>\n          <option value={2}>\n            Show Not completed\n          </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classnames('TodoList__item',\n                  todo.completed\n                    ? 'TodoList__item--checked'\n                    : 'TodoList__item--unchecked')}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>\n                    {todo.title}\n                  </p>\n                </label>\n\n                <button\n                  className={classnames(\n                    'TodoList__user-button',\n                    'button',\n                    todo.completed\n                      ? 'TodoList__user-button--selected'\n                      : '',\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User #\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  async componentDidMount() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (prevProps.userId !== this.props.userId) {\n      const user = await getUser(this.props.userId);\n\n      this.setState({ user });\n    }\n  }\n\n  render() {\n    const { userId } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user && (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {userId}\n              </span>\n            </h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              onClick={() => this.setState({ user: null })}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n}","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nexport class App extends React.Component {\n  state = {\n    selectedUserId: 0,\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectUser={(userId) => {\n              this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}